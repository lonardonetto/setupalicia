#!/bin/bash

## SetupAlicia v2.7.1 - Simplified Version
## Only essential applications: Traefik, Portainer, Evolution, N8N, N8N+MCP
## Instala√ß√£o: bash <(curl -sSL https://raw.githubusercontent.com/lonardonetto/setupalicia/main/setup.sh)

## Colors
amarelo="\e[33m"
verde="\e[32m"
branco="\e[97m"
vermelho="\e[91m"
reset="\e[0m"

## Version info
versao() {
echo -e "                     \e[97mSetupAlicia: \e[32mv. 2.7.1 (Simplified)\e[0m"
echo -e "\e[32mraw.githubusercontent.com/lonardonetto/setupalicia/main    \e[97m<----- Instala√ß√£o Remota ----->     \e[32mbash <(curl -sSL raw.githubusercontent.com/lonardonetto/setupalicia/main/setup.sh)\e[0m"
echo -e "\e[32malicia.setup.com/whatsapp2      \e[97m<----- Grupos no WhatsApp ----->     \e[32malicia.setup.com/whatsapp3\e[0m"
}

## Atualizar script
atualizar_script() {
    echo -e "${verde}Verificando atualiza√ß√µes...${reset}"
    
    # Download da vers√£o mais recente
    curl -sSL https://raw.githubusercontent.com/lonardonetto/setupalicia/main/setup.sh -o /tmp/setupalicia_new.sh
    
    if [ $? -eq 0 ]; then
        # Verificar se h√° diferen√ßas
        if ! diff -q "$0" /tmp/setupalicia_new.sh >/dev/null 2>&1; then
            echo -e "${amarelo}Nova vers√£o dispon√≠vel!${reset}"
            read -p "Deseja atualizar? (Y/N): " update_confirm
            
            if [[ $update_confirm =~ ^[Yy]$ ]]; then
                cp /tmp/setupalicia_new.sh "$0"
                chmod +x "$0"
                echo -e "${verde}‚úÖ Script atualizado! Reiniciando...${reset}"
                sleep 2
                exec "$0" "$@"
            fi
        else
            echo -e "${verde}‚úÖ Script j√° est√° atualizado!${reset}"
        fi
    else
        echo -e "${vermelho}‚ùå Erro ao verificar atualiza√ß√µes${reset}"
    fi
    
    rm -f /tmp/setupalicia_new.sh
}

## License agreement
direitos_instalador() {
    echo -e "$amarelo===================================================================================================\e[0m"
    echo -e "$amarelo=  $branco Este auto instalador foi desenvolvido para auxiliar na instala√ß√£o das principais aplica√ß√µes $amarelo  =\e[0m"
    echo -e "$amarelo=  $branco aplica√ß√£o dispon√≠veis aqui. Este Setup √© licenciado sob a Licen√ßa MIT (MIT).               $amarelo =\e[0m"
    echo -e "$amarelo=  $branco SetupAlicia (contato@alicia.setup.com) √© o autor original                                  $amarelo  =\e[0m"
    echo -e "$amarelo===================================================================================================\e[0m"
    echo ""
    read -p "Ao digitar Y voc√™ aceita e concorda com as orienta√ß√µes passadas acima (Y/N): " choice
    case $choice in
        Y|y) return ;;
        *) echo "Encerrando instalador..."; exit 1 ;;
    esac
}

## Main title
nome_instalador() { 
    clear
    echo ""
    echo -e "$branco       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó \e[0m"
    echo -e "$branco       ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó\e[0m"
    echo -e "$branco       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë\e[0m"
    echo -e "$branco       ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù      ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë\e[0m"
    echo -e "$branco       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë          ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë\e[0m"
    echo -e "$branco       ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù          ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù\e[0m"
    echo -e "$verde                                          VERS√ÉO SIMPLIFICADA                                    \e[0m"
    echo "" 
}

## Menu header
nome_menu() {
    clear
    echo -e "$amarelo===================================================================================================\e[0m"
    echo -e "$branco   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó \e[0m"
    echo -e "$branco  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó\e[0m"
    echo -e "$branco  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù\e[0m"
    echo -e "$branco  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù \e[0m"
    echo -e "$branco  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë     \e[0m"
    echo -e "$branco  ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù     \e[0m"
    echo -e "$amarelo===================================================================================================\e[0m"
    versao
    echo ""
}

## Simplified menu
menu_instalador_pg_1(){
    echo -e "${amarelo}[ 01 ]${reset} - ${branco}Traefik & Portainer ${verde}[1/1]${reset}"
    echo -e "${amarelo}[ 02 ]${reset} - ${branco}Evolution API ${verde}[1/1]${reset}"
    echo -e "${amarelo}[ 03 ]${reset} - ${branco}N8N ${verde}[1/1]${reset}"
    echo -e "${amarelo}[ 04 ]${reset} - ${branco}N8N + MCP ${verde}[1/1]${reset}"
    echo -e ""
    echo -e "${branco}Digite ${amarelo}COMANDOS${branco} para ver comandos especiais${reset}"
    echo -e ""
}

menu_comandos(){
    echo -e "> ${verde}Comandos Dispon√≠veis:${reset}"
    echo -e "${branco} ‚Ä¢ ${amarelo}atualizar${reset} - ${branco}Atualiza o SetupAlicia${reset}"
    echo -e "${branco} ‚Ä¢ ${amarelo}portainer.restart${reset} - ${branco}Reinicia o Portainer${reset}"
    echo -e "${branco} ‚Ä¢ ${amarelo}ctop${reset} - ${branco}Instala o CTOP${reset}"
    echo -e "${branco} ‚Ä¢ ${amarelo}htop${reset} - ${branco}Instala o HTOP${reset}"
    echo -e "${branco} ‚Ä¢ ${amarelo}limpar${reset} - ${branco}Limpa Docker${reset}"
    echo -e ""
    echo -e "${verde}Instala√ß√£o Remota:${reset}"
    echo -e "${branco} ‚Ä¢ ${amarelo}bash <(curl -sSL raw.githubusercontent.com/lonardonetto/setupalicia/main/setup.sh)${reset}"
    echo -e ""
    echo -e "${verde}Acesso aos Servi√ßos:${reset}"
    echo -e "${branco} ‚Ä¢ Traefik Dashboard: ${amarelo}http://IP_SERVIDOR:8080${reset}"
    echo -e "${branco} ‚Ä¢ Portainer: ${amarelo}https://portainer.SEUDOMINIO.com${reset}"
    echo -e "${branco} ‚Ä¢ Evolution/N8N/MCP: ${amarelo}https://SEUSUBDOMINIO.SEUDOMINIO.com${reset}"
    echo -e ""
    echo -e "${verde}Funcionalidades SSL:${reset}"
    echo -e "${branco} ‚Ä¢ Traefik: ${verde}Dashboard sem SSL (IP:8080)${reset}"
    echo -e "${branco} ‚Ä¢ Portainer: ${verde}SSL autom√°tico via Let's Encrypt${reset}"
    echo -e "${branco} ‚Ä¢ Aplica√ß√µes: ${verde}SSL autom√°tico via Let's Encrypt${reset}"
    echo -e "${branco} ‚Ä¢ Redirecionamento: ${verde}HTTP -> HTTPS autom√°tico${reset}"
    echo -e ""
    echo -e "${amarelo}‚ö†Ô∏è  IMPORTANTE: Instale primeiro o Traefik & Portainer (op√ß√£o 1)${reset}"
    echo -e "${branco}Digite ${amarelo}P1${branco} para voltar ao menu principal${reset}"
    echo -e ""
}

## Docker verification
verificar_docker_e_portainer_traefik() {
    if ! command -v docker &> /dev/null; then
        echo -e "${vermelho}Docker n√£o encontrado!${reset}"
        echo -e "${amarelo}Por favor, instale primeiro o Traefik & Portainer (op√ß√£o 1).${reset}"
        sleep 3
        return 1
    fi
    
    # Verificar se o Swarm est√° ativo
    SWARM_STATUS=$(docker info --format '{{.Swarm.LocalNodeState}}' 2>/dev/null)
    if [ "$SWARM_STATUS" != "active" ]; then
        echo -e "${vermelho}Docker Swarm n√£o est√° ativo!${reset}"
        echo -e "${amarelo}Por favor, instale primeiro o Traefik & Portainer (op√ß√£o 1).${reset}"
        sleep 3
        return 1
    fi
    
    return 0
}

## Verifica√ß√£o e instala√ß√£o inicial completa
verificar_e_instalar_requisitos() {
    echo -e "${verde}üîç Verificando pr√©-requisitos...${reset}"
    
    # Verificar conectividade
    echo -e "${amarelo}‚ö†Ô∏è  Testando conectividade com a internet...${reset}"
    if ! curl -sSf https://www.google.com >/dev/null 2>&1; then
        echo -e "${vermelho}‚ùå Erro: Sem conex√£o com a internet${reset}"
        return 1
    fi
    echo -e "${verde}‚úÖ Conectividade: OK${reset}"
    
    # Verificar se Docker est√° instalado
    echo -e "${amarelo}‚ö†Ô∏è  Verificando se Docker est√° instalado...${reset}"
    if ! command -v docker &> /dev/null; then
        echo -e "${amarelo}‚ö†Ô∏è  Docker n√£o encontrado. Instalando Docker...${reset}"
        curl -fsSL https://get.docker.com | sh
        systemctl enable docker
        systemctl start docker
        echo -e "${verde}‚úÖ Docker instalado com sucesso!${reset}"
    else
        echo -e "${verde}‚úÖ Docker: J√° instalado${reset}"
    fi
    
    # Verificar Docker Swarm
    echo -e "${amarelo}‚ö†Ô∏è  Verificando Docker Swarm...${reset}"
    SWARM_STATUS=$(docker info --format '{{.Swarm.LocalNodeState}}' 2>/dev/null)
    if [ "$SWARM_STATUS" != "active" ]; then
        echo -e "${amarelo}‚ö†Ô∏è  Inicializando Docker Swarm...${reset}"
        docker swarm init --advertise-addr $(hostname -I | awk '{print $1}') 2>/dev/null
        echo -e "${verde}‚úÖ Docker Swarm inicializado!${reset}"
    else
        echo -e "${verde}‚úÖ Docker Swarm: J√° ativo${reset}"
    fi
    
    # Criar diret√≥rios necess√°rios
    echo -e "${amarelo}‚ö†Ô∏è  Criando diret√≥rios...${reset}"
    mkdir -p /root/dados_vps
    echo -e "${verde}‚úÖ Diret√≥rios criados${reset}"
    
    # Configurar rede do Docker Swarm
    echo -e "${amarelo}‚ö†Ô∏è  Configurando rede Docker Swarm...${reset}"
    docker network create --driver overlay --attachable traefik_proxy 2>/dev/null || true
    echo -e "${verde}‚úÖ Rede 'traefik_proxy' configurada${reset}"
    
    echo -e "${verde}üéâ Todos os pr√©-requisitos instalados e configurados!${reset}"
    echo ""
    return 0
}

## Stack verification
verificar_stack() {
    local nome_stack="$1"
    if docker stack ls --format "{{.Name}}" | grep -q "^${nome_stack}$"; then
        echo -e "Stack '$amarelo${nome_stack}\e[0m' j√° existe."
        echo "Remova no Portainer para reinstalar."
        sleep 3
        return 0
    else
        return 1
    fi
}

## Installation functions with Docker Swarm support
ferramenta_traefik_e_portainer() {
    clear
    echo -e "${verde}=== INSTALA√á√ÉO TRAEFIK & PORTAINER COM DOCKER SWARM ===${reset}"
    echo ""
    
    # Verificar e instalar todos os pr√©-requisitos
    if ! verificar_e_instalar_requisitos; then
        echo -e "${vermelho}Erro na verifica√ß√£o dos pr√©-requisitos!${reset}"
        read -p "Pressione Enter para continuar..."
        return 1
    fi
    
    # Coletar informa√ß√µes de dom√≠nio para certificados SSL
    echo -e "${amarelo}Configura√ß√£o de Dom√≠nios para SSL Autom√°tico:${reset}"
    echo ""
    
    read -p "Digite o dom√≠nio principal do seu servidor (ex: meuservidor.com): " dominio_principal
    read -p "Digite o subdom√≠nio para o Portainer (ex: portainer): " sub_portainer
    read -p "Digite seu email para Let's Encrypt (para certificados SSL): " email_ssl
    
    echo ""
    echo -e "${verde}Configura√ß√£o SSL:${reset}"
    echo -e "‚Ä¢ Dom√≠nio principal: ${amarelo}$dominio_principal${reset}"
    echo -e "‚Ä¢ Traefik Dashboard: ${amarelo}http://IP_SERVIDOR:8080${reset} (sem SSL)"
    echo -e "‚Ä¢ Portainer: ${amarelo}https://$sub_portainer.$dominio_principal${reset}"
    echo -e "‚Ä¢ Email Let's Encrypt: ${amarelo}$email_ssl${reset}"
    echo -e "‚Ä¢ Certificados SSL: ${verde}Autom√°tico via Let's Encrypt${reset}"
    echo -e "‚Ä¢ Modo: ${verde}Docker Swarm Stack${reset}"
    echo ""
    
    read -p "Confirma a instala√ß√£o? (Y/N): " confirm
    case $confirm in
        Y|y)
            echo -e "${verde}Iniciando instala√ß√£o...${reset}"
            install_traefik_swarm "$email_ssl"
            install_portainer_swarm_ssl "$sub_portainer" "$dominio_principal"
            echo -e "${verde}‚úÖ Traefik & Portainer instalados com Docker Swarm!${reset}"
            echo -e "${verde}‚úÖ Traefik Dashboard: http://$(hostname -I | awk '{print $1}'):8080${reset}"
            echo -e "${verde}‚úÖ Portainer: https://$sub_portainer.$dominio_principal${reset}"
            echo -e "${verde}‚úÖ SSL autom√°tico configurado${reset}"
            ;;
        *)
            echo "Instala√ß√£o cancelada."
            return
            ;;
    esac
}

ferramenta_evolution() {
    clear
    echo -e "${verde}=== INSTALA√á√ÉO EVOLUTION API COM SSL AUTOM√ÅTICO ===${reset}"
    echo ""
    
    if ! verificar_docker_e_portainer_traefik; then
        echo -e "${vermelho}Erro: Traefik & Portainer devem ser instalados primeiro!${reset}"
        return 1
    fi
    
    read -p "Digite o dom√≠nio para Evolution API (ex: evolution.meudominio.com): " dominio_evolution
    
    echo ""
    echo -e "${verde}Configura√ß√£o Evolution API:${reset}"
    echo -e "‚Ä¢ Dom√≠nio: ${amarelo}$dominio_evolution${reset}"
    echo -e "‚Ä¢ SSL: ${verde}Autom√°tico via Traefik + Let's Encrypt${reset}"
    echo -e "‚Ä¢ Modo: ${verde}Docker Swarm Stack${reset}"
    echo ""
    
    read -p "Confirma a instala√ß√£o? (Y/N): " confirm
    case $confirm in
        Y|y)
            echo -e "${verde}Instalando Evolution API...${reset}"
            install_evolution_swarm_ssl "$dominio_evolution"
            echo -e "${verde}‚úÖ Evolution API instalada!${reset}"
            echo -e "${verde}‚úÖ Acesso: https://$dominio_evolution${reset}"
            ;;
        *)
            echo "Instala√ß√£o cancelada."
            ;;
    esac
}

ferramenta_n8n() {
    clear
    echo -e "${verde}=== INSTALA√á√ÉO N8N COM SSL AUTOM√ÅTICO ===${reset}"
    echo ""
    
    if ! verificar_docker_e_portainer_traefik; then
        echo -e "${vermelho}Erro: Traefik & Portainer devem ser instalados primeiro!${reset}"
        return 1
    fi
    
    read -p "Digite o dom√≠nio para N8N (ex: n8n.meudominio.com): " dominio_n8n
    
    echo ""
    echo -e "${verde}Configura√ß√£o N8N:${reset}"
    echo -e "‚Ä¢ Dom√≠nio: ${amarelo}$dominio_n8n${reset}"
    echo -e "‚Ä¢ SSL: ${verde}Autom√°tico via Traefik + Let's Encrypt${reset}"
    echo -e "‚Ä¢ Workflows: ${verde}Interface visual para automa√ß√£o${reset}"
    echo -e "‚Ä¢ Modo: ${verde}Docker Swarm Stack${reset}"
    echo ""
    
    read -p "Confirma a instala√ß√£o? (Y/N): " confirm
    case $confirm in
        Y|y)
            echo -e "${verde}Instalando N8N...${reset}"
            install_n8n_swarm_ssl "$dominio_n8n"
            echo -e "${verde}‚úÖ N8N instalado!${reset}"
            echo -e "${verde}‚úÖ Acesso: https://$dominio_n8n${reset}"
            ;;
        *)
            echo "Instala√ß√£o cancelada."
            ;;
    esac
}

n8n.mcp() {
    clear
    echo -e "${verde}=== INSTALA√á√ÉO N8N + MCP COM SSL AUTOM√ÅTICO ===${reset}"
    echo ""
    
    if ! verificar_docker_e_portainer_traefik; then
        echo -e "${vermelho}Erro: Traefik & Portainer devem ser instalados primeiro!${reset}"
        return 1
    fi
    
    read -p "Digite o dom√≠nio para N8N+MCP (ex: n8n-mcp.meudominio.com): " dominio_n8n_mcp
    
    echo ""
    echo -e "${verde}Configura√ß√£o N8N + MCP:${reset}"
    echo -e "‚Ä¢ Dom√≠nio: ${amarelo}$dominio_n8n_mcp${reset}"
    echo -e "‚Ä¢ SSL: ${verde}Autom√°tico via Traefik + Let's Encrypt${reset}"
    echo -e "‚Ä¢ MCP: ${verde}Model Context Protocol integrado${reset}"
    echo -e "‚Ä¢ AI Integration: ${verde}Suporte avan√ßado para IA${reset}"
    echo -e "‚Ä¢ Modo: ${verde}Docker Swarm Stack${reset}"
    echo ""
    
    read -p "Confirma a instala√ß√£o? (Y/N): " confirm
    case $confirm in
        Y|y)
            echo -e "${verde}Instalando N8N+MCP...${reset}"
            install_n8n_mcp_swarm_ssl "$dominio_n8n_mcp"
            echo -e "${verde}‚úÖ N8N+MCP instalado!${reset}"
            echo -e "${verde}‚úÖ Acesso: https://$dominio_n8n_mcp${reset}"
            ;;
        *)
            echo "Instala√ß√£o cancelada."
            ;;
    esac
}

## Docker Swarm Implementation Functions
install_traefik_swarm() {
    local email_ssl="${1:-admin@exemplo.com}"
    echo -e "${verde}‚öôÔ∏è Configurando Traefik com Docker Swarm e SSL...${reset}"
    
    # Create traefik.yaml stack
    cat > traefik.yaml << EOF
version: "3.7"
services:

## --------------------------- ALICIA --------------------------- ##

  traefik:
    image: traefik:v3.0
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.swarmmode=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencryptresolver.acme.httpchallenge=true
      - --certificatesresolvers.letsencryptresolver.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.letsencryptresolver.acme.email=$email_ssl
      - --certificatesresolvers.letsencryptresolver.acme.storage=/etc/traefik/acme/acme.json
      - --certificatesresolvers.letsencryptresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      - --log.level=INFO

    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_acme:/etc/traefik/acme

    networks:
      - traefik_proxy

    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.http.routers.traefik.rule=Host(\`traefik\`)
        - traefik.http.routers.traefik.service=api@internal
        - traefik.http.services.traefik.loadbalancer.server.port=8080

## --------------------------- ALICIA --------------------------- ##

volumes:
  traefik_acme:
    external: true
    name: traefik_acme

networks:
  traefik_proxy:
    external: true
    name: traefik_proxy
EOF

    # Create ACME volume
    docker volume create traefik_acme 2>/dev/null || true
    
    # Deploy Traefik stack
    docker stack deploy --prune --resolve-image always -c traefik.yaml traefik
    if [ $? -eq 0 ]; then
        echo -e "${verde}‚úÖ Traefik configurado com Docker Swarm e SSL${reset}"
    else
        echo -e "${vermelho}‚ùå Erro ao configurar Traefik${reset}"
    fi
}

install_portainer_swarm() {
    echo -e "${verde}‚öôÔ∏è Configurando Portainer com Docker Swarm...${reset}"
    
    # Create portainer.yaml stack
    cat > portainer.yaml << EOF
version: "3.7"
services:

## --------------------------- ALICIA --------------------------- ##

  portainer:
    image: portainer/portainer-ce:latest
    command: -H unix:///var/run/docker.sock

    ports:
      - "9000:9000"

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

    networks:
      - traefik_proxy

    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.http.routers.portainer.rule=Host(\`portainer\`)
        - traefik.http.services.portainer.loadbalancer.server.port=9000

## --------------------------- ALICIA --------------------------- ##

volumes:
  portainer_data:
    external: true
    name: portainer_data

networks:
  traefik_proxy:
    external: true
    name: traefik_proxy
EOF

    # Create Portainer volume
    docker volume create portainer_data 2>/dev/null || true
    
    # Deploy Portainer stack
    docker stack deploy --prune --resolve-image always -c portainer.yaml portainer
    if [ $? -eq 0 ]; then
        echo -e "${verde}‚úÖ Portainer configurado com Docker Swarm${reset}"
    else
        echo -e "${vermelho}‚ùå Erro ao configurar Portainer${reset}"
    fi
}

install_portainer_swarm_ssl() {
    local sub_portainer="$1"
    local dominio_principal="$2"
    echo -e "${verde}‚öôÔ∏è Configurando Portainer com Docker Swarm e SSL...${reset}"
    
    # Create portainer.yaml stack
    cat > portainer.yaml << EOF
version: "3.7"
services:

## --------------------------- ALICIA --------------------------- ##

  portainer:
    image: portainer/portainer-ce:latest
    command: -H unix:///var/run/docker.sock

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

    networks:
      - traefik_proxy

    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.http.routers.portainer.rule=Host(\`$sub_portainer.$dominio_principal\`)
        - traefik.http.routers.portainer.tls=true
        - traefik.http.routers.portainer.tls.certresolver=letsencryptresolver
        - traefik.http.routers.portainer.entrypoints=websecure
        - traefik.http.services.portainer.loadbalancer.server.port=9000
        - traefik.http.routers.portainer-redirect.rule=Host(\`$sub_portainer.$dominio_principal\`)
        - traefik.http.routers.portainer-redirect.entrypoints=web
        - traefik.http.routers.portainer-redirect.middlewares=redirect-to-https
        - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https

## --------------------------- ALICIA --------------------------- ##

volumes:
  portainer_data:
    external: true
    name: portainer_data

networks:
  traefik_proxy:
    external: true
    name: traefik_proxy
EOF

    # Create Portainer volume
    docker volume create portainer_data 2>/dev/null || true
    
    # Deploy Portainer stack
    docker stack deploy --prune --resolve-image always -c portainer.yaml portainer
    if [ $? -eq 0 ]; then
        echo -e "${verde}‚úÖ Portainer configurado com Docker Swarm e SSL${reset}"
    else
        echo -e "${vermelho}‚ùå Erro ao configurar Portainer${reset}"
    fi
}

install_evolution_swarm() {
    echo -e "${verde}‚öôÔ∏è Configurando Evolution API com Docker Swarm...${reset}"
    
    # Create evolution.yaml stack
    cat > evolution.yaml << EOF
version: "3.7"
services:

## --------------------------- ALICIA --------------------------- ##

  evolution:
    image: atendai/evolution-api:v1.7.1

    ports:
      - "8081:8080"

    networks:
      - traefik_proxy

    environment:
      - AUTHENTICATION_API_KEY=\$(openssl rand -base64 32)
      - AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES=true
      - QRCODE_LIMIT=30
      - EVOLUTION_API_URL=http://\$(hostname -I | awk '{print \$1}'):8081

    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.http.routers.evolution.rule=Host(\`evolution\`)
        - traefik.http.services.evolution.loadbalancer.server.port=8080

## --------------------------- ALICIA --------------------------- ##

networks:
  traefik_proxy:
    external: true
    name: traefik_proxy
EOF

    # Deploy Evolution stack
    docker stack deploy --prune --resolve-image always -c evolution.yaml evolution
    if [ $? -eq 0 ]; then
        echo -e "${verde}‚úÖ Evolution API configurada com Docker Swarm${reset}"
    else
        echo -e "${vermelho}‚ùå Erro ao configurar Evolution API${reset}"
    fi
}

install_n8n_swarm() {
    echo -e "${verde}‚öôÔ∏è Configurando N8N com Docker Swarm...${reset}"
    
    # Create n8n.yaml stack
    cat > n8n.yaml << EOF
version: "3.7"
services:

## --------------------------- ALICIA --------------------------- ##

  n8n:
    image: n8nio/n8n:latest

    ports:
      - "5678:5678"

    volumes:
      - n8n_data:/home/node/.n8n

    networks:
      - traefik_proxy

    environment:
      - NODE_ENV=production
      - N8N_HOST=\$(hostname -I | awk '{print \$1}')
      - N8N_PROTOCOL=http
      - N8N_PORT=5678

    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.http.routers.n8n.rule=Host(\`n8n\`)
        - traefik.http.services.n8n.loadbalancer.server.port=5678

## --------------------------- ALICIA --------------------------- ##

volumes:
  n8n_data:
    external: true
    name: n8n_data

networks:
  traefik_proxy:
    external: true
    name: traefik_proxy
EOF

    # Create N8N volume
    docker volume create n8n_data 2>/dev/null || true
    
    # Deploy N8N stack
    docker stack deploy --prune --resolve-image always -c n8n.yaml n8n
    if [ $? -eq 0 ]; then
        echo -e "${verde}‚úÖ N8N configurado com Docker Swarm${reset}"
    else
        echo -e "${vermelho}‚ùå Erro ao configurar N8N${reset}"
    fi
}

install_n8n_mcp_swarm() {
    echo -e "${verde}‚öôÔ∏è Configurando N8N+MCP com Docker Swarm...${reset}"
    
    # Create n8n-mcp.yaml stack
    cat > n8n-mcp.yaml << EOF
version: "3.7"
services:

## --------------------------- ALICIA --------------------------- ##

  n8n-mcp:
    image: n8nio/n8n:latest

    ports:
      - "5679:5678"

    volumes:
      - n8n_mcp_data:/home/node/.n8n

    networks:
      - traefik_proxy

    environment:
      - NODE_ENV=production
      - N8N_HOST=\$(hostname -I | awk '{print \$1}')
      - N8N_PROTOCOL=http
      - N8N_PORT=5678
      - N8N_AI_ENABLED=true
      - N8N_MCP_ENABLED=true

    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.http.routers.n8n-mcp.rule=Host(\`n8n-mcp\`)
        - traefik.http.services.n8n-mcp.loadbalancer.server.port=5678

## --------------------------- ALICIA --------------------------- ##

volumes:
  n8n_mcp_data:
    external: true
    name: n8n_mcp_data

networks:
  traefik_proxy:
    external: true
    name: traefik_proxy
EOF

    # Create N8N MCP volume
    docker volume create n8n_mcp_data 2>/dev/null || true
    
    # Deploy N8N MCP stack
    docker stack deploy --prune --resolve-image always -c n8n-mcp.yaml n8n-mcp
    if [ $? -eq 0 ]; then
        echo -e "${verde}‚úÖ N8N+MCP configurado com Docker Swarm${reset}"
    else
        echo -e "${vermelho}‚ùå Erro ao configurar N8N+MCP${reset}"
    fi
}

portainer.restart() {
    echo "Reiniciando Portainer..."
    docker service update --force portainer_portainer 2>/dev/null || echo "Portainer stack n√£o encontrado"
}

ctop() {
    echo "Instalando CTOP..."
    curl -Lo ctop https://github.com/bcicen/ctop/releases/download/v0.7.7/ctop-0.7.7-linux-amd64
    sudo mv ctop /usr/local/bin/ && sudo chmod +x /usr/local/bin/ctop
    echo "CTOP instalado!"
}

htop() {
    echo "Instalando HTOP..."
    apt update && apt install htop -y
    echo "HTOP instalado!"
}

limpar() {
    echo "Limpando sistema Docker..."
    docker system prune -af
}

install_evolution_swarm_ssl() {
    local dominio="$1"
    echo -e "${verde}‚öôÔ∏è Configurando Evolution API com Docker Swarm e SSL...${reset}"
    
    # Create evolution.yaml stack
    cat > evolution.yaml << EOF
version: "3.7"
services:

## --------------------------- ALICIA --------------------------- ##

  evolution:
    image: atendai/evolution-api:v1.7.1

    networks:
      - traefik_proxy

    environment:
      - AUTHENTICATION_API_KEY=\$(openssl rand -base64 32)
      - AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES=true
      - QRCODE_LIMIT=30
      - EVOLUTION_API_URL=https://$dominio

    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.http.routers.evolution.rule=Host(\`$dominio\`)
        - traefik.http.routers.evolution.tls=true
        - traefik.http.routers.evolution.tls.certresolver=letsencryptresolver
        - traefik.http.routers.evolution.entrypoints=websecure
        - traefik.http.services.evolution.loadbalancer.server.port=8080
        - traefik.http.routers.evolution-redirect.rule=Host(\`$dominio\`)
        - traefik.http.routers.evolution-redirect.entrypoints=web
        - traefik.http.routers.evolution-redirect.middlewares=redirect-to-https
        - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https

## --------------------------- ALICIA --------------------------- ##

networks:
  traefik_proxy:
    external: true
    name: traefik_proxy
EOF

    # Deploy Evolution stack
    docker stack deploy --prune --resolve-image always -c evolution.yaml evolution
    if [ $? -eq 0 ]; then
        echo -e "${verde}‚úÖ Evolution API configurada com Docker Swarm e SSL${reset}"
    else
        echo -e "${vermelho}‚ùå Erro ao configurar Evolution API${reset}"
    fi
}

install_n8n_swarm_ssl() {
    local dominio="$1"
    echo -e "${verde}‚öôÔ∏è Configurando N8N com Docker Swarm e SSL...${reset}"
    
    # Create n8n.yaml stack
    cat > n8n.yaml << EOF
version: "3.7"
services:

## --------------------------- ALICIA --------------------------- ##

  n8n:
    image: n8nio/n8n:latest

    volumes:
      - n8n_data:/home/node/.n8n

    networks:
      - traefik_proxy

    environment:
      - NODE_ENV=production
      - N8N_HOST=$dominio
      - N8N_PROTOCOL=https
      - N8N_PORT=443
      - WEBHOOK_URL=https://$dominio/

    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.http.routers.n8n.rule=Host(\`$dominio\`)
        - traefik.http.routers.n8n.tls=true
        - traefik.http.routers.n8n.tls.certresolver=letsencryptresolver
        - traefik.http.routers.n8n.entrypoints=websecure
        - traefik.http.services.n8n.loadbalancer.server.port=5678
        - traefik.http.routers.n8n-redirect.rule=Host(\`$dominio\`)
        - traefik.http.routers.n8n-redirect.entrypoints=web
        - traefik.http.routers.n8n-redirect.middlewares=redirect-to-https

## --------------------------- ALICIA --------------------------- ##

volumes:
  n8n_data:
    external: true
    name: n8n_data

networks:
  traefik_proxy:
    external: true
    name: traefik_proxy
EOF

    # Create N8N volume
    docker volume create n8n_data 2>/dev/null || true
    
    # Deploy N8N stack
    docker stack deploy --prune --resolve-image always -c n8n.yaml n8n
    if [ $? -eq 0 ]; then
        echo -e "${verde}‚úÖ N8N configurado com Docker Swarm e SSL${reset}"
    else
        echo -e "${vermelho}‚ùå Erro ao configurar N8N${reset}"
    fi
}

install_n8n_mcp_swarm_ssl() {
    local dominio="$1"
    echo -e "${verde}‚öôÔ∏è Configurando N8N+MCP com Docker Swarm e SSL...${reset}"
    
    # Create n8n-mcp.yaml stack
    cat > n8n-mcp.yaml << EOF
version: "3.7"
services:

## --------------------------- ALICIA --------------------------- ##

  n8n-mcp:
    image: n8nio/n8n:latest

    volumes:
      - n8n_mcp_data:/home/node/.n8n

    networks:
      - traefik_proxy

    environment:
      - NODE_ENV=production
      - N8N_HOST=$dominio
      - N8N_PROTOCOL=https
      - N8N_PORT=443
      - WEBHOOK_URL=https://$dominio/
      - N8N_AI_ENABLED=true
      - N8N_MCP_ENABLED=true

    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.http.routers.n8n-mcp.rule=Host(\`$dominio\`)
        - traefik.http.routers.n8n-mcp.tls=true
        - traefik.http.routers.n8n-mcp.tls.certresolver=letsencryptresolver
        - traefik.http.routers.n8n-mcp.entrypoints=websecure
        - traefik.http.services.n8n-mcp.loadbalancer.server.port=5678
        - traefik.http.routers.n8n-mcp-redirect.rule=Host(\`$dominio\`)
        - traefik.http.routers.n8n-mcp-redirect.entrypoints=web
        - traefik.http.routers.n8n-mcp-redirect.middlewares=redirect-to-https

## --------------------------- ALICIA --------------------------- ##

volumes:
  n8n_mcp_data:
    external: true
    name: n8n_mcp_data

networks:
  traefik_proxy:
    external: true
    name: traefik_proxy
EOF

    # Create N8N MCP volume
    docker volume create n8n_mcp_data 2>/dev/null || true
    
    # Deploy N8N MCP stack
    docker stack deploy --prune --resolve-image always -c n8n-mcp.yaml n8n-mcp
    if [ $? -eq 0 ]; then
        echo -e "${verde}‚úÖ N8N+MCP configurado com Docker Swarm e SSL${reset}"
    else
        echo -e "${vermelho}‚ùå Erro ao configurar N8N+MCP${reset}"
    fi
}

## Main installer loop
nome_instalador
direitos_instalador

while true; do
    nome_menu
    menu_instalador_pg_1

    read -p "Digite o N√öMERO da op√ß√£o desejada ou COMANDO: " opcao
    set -- $opcao
    opcao1=$1
    opcao2=$2

    case $opcao1 in
        1|01|portainer|traefik|PORTAINER|TRAEFIK)
            verificar_stack "traefik" && continue
            verificar_stack "portainer" && continue
            ferramenta_traefik_e_portainer
            ;;
        2|02|evolution|evo|EVO)
            verificar_stack "evolution${opcao2:+_$opcao2}" && continue
            if verificar_docker_e_portainer_traefik; then
                ferramenta_evolution "$opcao2"
            fi
            ;;
        3|03|n8n|N8N)
            verificar_stack "n8n${opcao2:+_$opcao2}" && continue
            if verificar_docker_e_portainer_traefik; then
                ferramenta_n8n "$opcao2"
            fi
            ;;
        4|04|n8n.mcp|N8N.MCP)
            verificar_stack "n8n-mcp${opcao2:+_$opcao2}" && continue
            if verificar_docker_e_portainer_traefik; then
                n8n.mcp "$opcao2"
            fi
            ;;
        portainer.restart) portainer.restart ;;
        atualizar|update|ATUALIZAR|UPDATE) atualizar_script ;;
        ctop) ctop ;;
        htop) htop ;;
        limpar|clean|LIMPAR|CLEAN) limpar ;;
        comandos|COMANDOS) menu_comandos; read -p "Pressione Enter para continuar..." ;;
        sair|fechar|exit|close|x)
            clear
            echo "Saindo do instalador..."
            break
            ;;
        *) echo "Op√ß√£o inv√°lida." ;;
    esac
    echo ""
done
            verificar_stack "traefik" && continue
            verificar_stack "portainer" && continue
            ferramenta_traefik_e_portainer
            ;;
        2|02|evolution|evo|EVO)
            verificar_stack "evolution${opcao2:+_$opcao2}" && continue
            if verificar_docker_e_portainer_traefik; then
                ferramenta_evolution "$opcao2"
            fi
            ;;
        3|03|n8n|N8N)
            verificar_stack "n8n${opcao2:+_$opcao2}" && continue
            if verificar_docker_e_portainer_traefik; then
                ferramenta_n8n "$opcao2"
            fi
            ;;
        4|04|n8n.mcp|N8N.MCP)
            verificar_stack "n8n-mcp${opcao2:+_$opcao2}" && continue
            if verificar_docker_e_portainer_traefik; then
                n8n.mcp "$opcao2"
            fi
            ;;
        portainer.restart) portainer.restart ;;
        atualizar|update|ATUALIZAR|UPDATE) atualizar_script ;;
        ctop) ctop ;;
        htop) htop ;;
        limpar|clean|LIMPAR|CLEAN) limpar ;;
        comandos|COMANDOS) menu_comandos; read -p "Pressione Enter para continuar..." ;;
        sair|fechar|exit|close|x)
            clear
            echo "Saindo do instalador..."
            break
            ;;
        *) echo "Op√ß√£o inv√°lida." ;;
    esac
    echo ""
done